using Azure;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Microsoft.Extensions.Azure;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace ExtractTextFromBlobProjections
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("This script extract text from blob json projections generated by Cognitive Search");

            Console.WriteLine("Input the connection string to your Storage Account: ");
            string storageSAS = Console.ReadLine();

            Console.WriteLine("Input the source container name: ");
            string blobContainerName = Console.ReadLine();

            Console.WriteLine("Input the destination container name: ");
            string textContainerName = Console.ReadLine();

            Console.WriteLine("Do you want to use the translated text? (Y/N)");
            string yn = Console.ReadLine();
            bool uploadTranslation = false;
            if (yn.ToLower().Equals("y")) uploadTranslation = true;

            BlobServiceClient blobServiceClient = new BlobServiceClient(storageSAS);

            Console.WriteLine("Opening source container");
            BlobContainerClient blobContainerClient = blobServiceClient.GetBlobContainerClient(blobContainerName);

            Console.WriteLine("Opening target container");
            BlobContainerClient textContainerClient = blobServiceClient.GetBlobContainerClient(textContainerName);

            Console.WriteLine("Listing json blobs");
            Pageable<BlobItem> blobs = blobContainerClient.GetBlobs();

            foreach (BlobItem blob in blobs)
            {
                Console.WriteLine($"Downloading {blob.Name}");
                BlobClient blobClient = blobContainerClient.GetBlobClient(blob.Name);

                try
                {
                    BlobDownloadInfo download = blobClient.Download();
                    using (StreamReader reader = new StreamReader(download.Content))
                    {
                        Console.WriteLine("Extracting content");
                        string blobContent = reader.ReadToEnd();
                        BlobProjection bp = JsonConvert.DeserializeObject<BlobProjection>(blobContent);
                        
                        string text = uploadTranslation ? bp.translatedText : bp.merged_content;

                        if (!string.IsNullOrEmpty(text))
                        {
                            Console.WriteLine($"Uploading text to file {bp.metadata_storage_name}");

                            byte[] byteArray = Encoding.UTF8.GetBytes(text);
                            using (MemoryStream stream = new MemoryStream(byteArray))
                            {
                                textContainerClient.UploadBlob($"{bp.metadata_storage_name}.txt", stream);
                            }
                        }

                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("---- ERROR ----");
                    Console.WriteLine(ex.Message);
                }

                Console.WriteLine();
                Console.WriteLine();
            }
        }
    }
}
